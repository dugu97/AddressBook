package com.dugu.addressbook.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dugu.addressbook.model.Phone;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE".
*/
public class PhoneDao extends AbstractDao<Phone, Long> {

    public static final String TABLENAME = "PHONE";

    /**
     * Properties of entity Phone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Phone_id = new Property(0, Long.class, "phone_id", true, "_id");
        public final static Property Contact_id = new Property(1, Long.class, "contact_id", false, "CONTACT_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Phone_name = new Property(3, String.class, "phone_name", false, "PHONE_NAME");
    }

    private Query<Phone> contact_PhoneListQuery;

    public PhoneDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: phone_id
                "\"CONTACT_ID\" INTEGER," + // 1: contact_id
                "\"PHONE\" TEXT," + // 2: phone
                "\"PHONE_NAME\" TEXT);"); // 3: phone_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Phone entity) {
        stmt.clearBindings();
 
        Long phone_id = entity.getPhone_id();
        if (phone_id != null) {
            stmt.bindLong(1, phone_id);
        }
 
        Long contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindLong(2, contact_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String phone_name = entity.getPhone_name();
        if (phone_name != null) {
            stmt.bindString(4, phone_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Phone entity) {
        stmt.clearBindings();
 
        Long phone_id = entity.getPhone_id();
        if (phone_id != null) {
            stmt.bindLong(1, phone_id);
        }
 
        Long contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindLong(2, contact_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String phone_name = entity.getPhone_name();
        if (phone_name != null) {
            stmt.bindString(4, phone_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Phone readEntity(Cursor cursor, int offset) {
        Phone entity = new Phone( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // phone_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // contact_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // phone_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Phone entity, int offset) {
        entity.setPhone_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContact_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Phone entity, long rowId) {
        entity.setPhone_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Phone entity) {
        if(entity != null) {
            return entity.getPhone_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Phone entity) {
        return entity.getPhone_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phoneList" to-many relationship of Contact. */
    public List<Phone> _queryContact_PhoneList(Long contact_id) {
        synchronized (this) {
            if (contact_PhoneListQuery == null) {
                QueryBuilder<Phone> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Contact_id.eq(null));
                contact_PhoneListQuery = queryBuilder.build();
            }
        }
        Query<Phone> query = contact_PhoneListQuery.forCurrentThread();
        query.setParameter(0, contact_id);
        return query.list();
    }

}
