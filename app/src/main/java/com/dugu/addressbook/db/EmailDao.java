package com.dugu.addressbook.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dugu.addressbook.model.Email;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMAIL".
*/
public class EmailDao extends AbstractDao<Email, Long> {

    public static final String TABLENAME = "EMAIL";

    /**
     * Properties of entity Email.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Email_id = new Property(0, Long.class, "email_id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Email_name = new Property(2, String.class, "email_name", false, "EMAIL_NAME");
    }

    private Query<Email> contact_EmailListQuery;

    public EmailDao(DaoConfig config) {
        super(config);
    }
    
    public EmailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: email_id
                "\"EMAIL\" TEXT," + // 1: email
                "\"EMAIL_NAME\" TEXT);"); // 2: email_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Email entity) {
        stmt.clearBindings();
 
        Long email_id = entity.getEmail_id();
        if (email_id != null) {
            stmt.bindLong(1, email_id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String email_name = entity.getEmail_name();
        if (email_name != null) {
            stmt.bindString(3, email_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Email entity) {
        stmt.clearBindings();
 
        Long email_id = entity.getEmail_id();
        if (email_id != null) {
            stmt.bindLong(1, email_id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String email_name = entity.getEmail_name();
        if (email_name != null) {
            stmt.bindString(3, email_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Email readEntity(Cursor cursor, int offset) {
        Email entity = new Email( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // email_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // email_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Email entity, int offset) {
        entity.setEmail_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Email entity, long rowId) {
        entity.setEmail_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Email entity) {
        if(entity != null) {
            return entity.getEmail_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Email entity) {
        return entity.getEmail_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "emailList" to-many relationship of Contact. */
    public List<Email> _queryContact_EmailList(Long email_id) {
        synchronized (this) {
            if (contact_EmailListQuery == null) {
                QueryBuilder<Email> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Email_id.eq(null));
                contact_EmailListQuery = queryBuilder.build();
            }
        }
        Query<Email> query = contact_EmailListQuery.forCurrentThread();
        query.setParameter(0, email_id);
        return query.list();
    }

}
